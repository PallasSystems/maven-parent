stages:
  - build
  - test
  - analyse
  - release

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -s ci_settings.xml"

# This template uses jdk8 for verifying and deploying images
image: maven:3.8.2-openjdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .m2/repository
    - .sonar/cache

build:
  stage: build
  before_script:
    - curl "https://gitlab.com/crobar-solutions/ravenholm/ci-pipelines/-/raw/main/java/maven/ci_settings.xml?private_token=${GITLAB_TOKEN}" > ci_settings.xml
  script:
    - 'mvn $MAVEN_CLI_OPTS clean install -DskipTests=true -DCI_PROJECT_ID=$CI_PROJECT_ID'
  artifacts:
    paths:
      - ci_settings.xml
  only:
    refs:
      - merge_request
      - main

jacoco:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS jacoco:prepare-agent test jacoco:report -DCI_PROJECT_ID=$CI_PROJECT_ID'
  artifacts:
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"
        - "**/target/failsafe-reports/TEST-*.xml"
  only:
    refs:
      - merge_request
      - main

spotbugs:
  stage: analyse
  script:
    - 'mvn $MAVEN_CLI_OPTS spotbugs:spotbugs -DCI_PROJECT_ID=$CI_PROJECT_ID'
  only:
    refs:
      - merge_request
      - main

pmd:
  stage: analyse
  script:
    - 'mvn $MAVEN_CLI_OPTS pmd:pmd pmd:cpd -DCI_PROJECT_ID=$CI_PROJECT_ID'
  only:
    refs:
      - merge_request
      - main

sonarcloud:
  stage: .post
  script:
    - 'mvn $MAVEN_CLI_OPTS verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DCI_PROJECT_ID=$CI_PROJECT_ID'
  only:
    refs:
      - merge_request
      - main

release:
  image: maven:3.8.2-openjdk-11
  stage: release
  only:
    variables:
      - $CI_COMMIT_REF_NAME =~ /^release\/.*$/i
  before_script:
    - curl "https://gitlab.com/crobar-solutions/ravenholm/ci-pipelines/-/raw/main/java/maven/ci_settings.xml?private_token=${GITLAB_TOKEN}" > ci_settings.xml
    - git config --global user.email "gitlab@crobar.uk"
    - git config --global user.name "GitLab Worker"
    - mkdir -p ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  script:
    - export "BRANCH_NAME=$(echo ${CI_COMMIT_REF_NAME} | tr / - | sed 's/release-*//')";
    - 'mvn $MAVEN_CLI_OPTS --settings ci_settings.xml --file pom.xml release:prepare -DreleaseVersion=$BRANCH_NAME -Dproject.id=$CI_PROJECT_ID -Dgoals=clean,jacoco:prepare-agent,deploy,jacoco:report,spotbugs:spotbugs,pmd:pmd,pmd:cpd,org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'
  after_script:
     - 'git fetch --all'
     - 'git checkout main'
     - 'echo "git merge ${CI_COMMIT_REF_NAME}"'
     - 'echo "git merge ${CI_COMMIT_REF_NAME}"'
     - 'echo "git push origin main"'
  artifacts:
    paths:
      - ci_settings.xml
      - target/*.jar
  release:
    name: 'Release $BRANCH_NAME'
    description: 'Created using the release gitlab-ci'
    tag_name: '$BRANCH_NAME'
    ref: '$BRANCH_NAME'
